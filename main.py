import asyncio

from aiogram import Dispatcher, Bot, F, types
from aiogram.filters import Command

dp = Dispatcher()
bot = Bot(token="6453026810:AAG871LBfaGMwCS-_Iz0yk6fAjxOckG8MdA")
user_balance = 2000


@dp.message(Command("start"))
@dp.callback_query(F.data == "start")
async def start(update):
    kb = [
        [types.InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [
            types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="user"),
            types.InlineKeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ],
        [types.InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about_us")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    update_type = type(update)
    if update_type is types.Message:
        await update.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—É—Ä—Å–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! ü§ì\n"
                            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —É—Ä–æ–∫–∏.", reply_markup=keyboard)
    elif update_type is types.CallbackQuery:
        await update.message.edit_text("–ü—Ä–∏–≤–µ—Ç! üëã\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—É—Ä—Å–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! ü§ì\n"
                                       "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —É—Ä–æ–∫–∏.", reply_markup=keyboard)


@dp.callback_query(F.data == "catalog")
async def catalog(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–ö—É—Ä—Å –ø–æ Python", callback_data="python"),
         types.InlineKeyboardButton(text="–ö—É—Ä—Å –ø–æ Aiogram", callback_data="aiogram")],
        [types.InlineKeyboardButton(text="–ö—É—Ä—Å –ø–æ Telebot", callback_data="telebot"),
         types.InlineKeyboardButton(text="–ö—É—Ä—Å –ø–æ Django", callback_data="django")],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–≠—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤!\n"
                                     "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –∏ –ø—Ä–æ—á–∏—Ç–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ!", reply_markup=keyboard)


@dp.callback_query(F.data == "python")
async def python(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy_python")],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–≠—Ç–æ—Ç –∫—É—Ä—Å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–± –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö,\n"
                                     "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è,"
                                     "\n–∏—Å–ø–æ–ª—å–∑—É—è –≤–µ—Ä—Å–∏—é —è–∑—ã–∫–∞ Python.\n"
                                     "–¶–µ–Ω–∞ –∫—É—Ä—Å–∞: 1000", reply_markup=keyboard)


@dp.callback_query(F.data == "aiogram")
async def aiogram(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy_aiogram")],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text(
        "aiogram ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Telegram Bot API,\n"
        "–Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio –∏ aiohttp. \n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ.\n"
        "–¶–µ–Ω–∞ –∫—É—Ä—Å–∞: 1000", reply_markup=keyboard)


@dp.callback_query(F.data == "telebot")
async def aiogram(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy_telebot")],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text(
        "–ö—É—Ä—Å –ø–æ telebot\n"
        "–¶–µ–Ω–∞ –∫—É—Ä—Å–∞: 1000", reply_markup=keyboard)


@dp.callback_query(F.data == "django")
async def django(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buy_django")],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text(
        "–ö—É—Ä—Å –ø–æ django\n"
        "–¶–µ–Ω–∞ –∫—É—Ä—Å–∞: 1000", reply_markup=keyboard)


@dp.callback_query(F.data == "buy_telebot")
@dp.callback_query(F.data == "buy_django")
@dp.callback_query(F.data == "buy_aiogram")
@dp.callback_query(F.data == "buy_python")
async def buys(callback: types.CallbackQuery):
    global user_balance
    kb = [
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    if user_balance >= 1000:
        user_balance -= 1000
        await callback.message.edit_text("–ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω! –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä—ã—Ç!", reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", reply_markup=keyboard)


@dp.callback_query(F.data == "user")
async def user(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text(f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!\n"
                                     f"–¢–≤–æ–π id - {callback.from_user.id}\n"
                                     f"–î–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user_balance}", reply_markup=keyboard)


@dp.callback_query(F.data == "top_up_balance")
async def top_up_balance(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="500—Ä", callback_data="top_up_500"),
         types.InlineKeyboardButton(text="1000—Ä", callback_data="top_up_1000")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=keyboard)


@dp.callback_query(F.data == "top_up_500")
async def top_up_500(callback: types.CallbackQuery):
    global user_balance
    kb = [
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 500!\n"
                                     "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—á–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Ñ–∏–ª—å'.", reply_markup=keyboard)
    user_balance += 500


@dp.callback_query(F.data == "top_up_1000")
async def top_up_1000(callback: types.CallbackQuery):
    global user_balance
    kb = [
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 1000!\n"
                                     "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—á–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Ñ–∏–ª—å'.", reply_markup=keyboard)
    user_balance += 1000


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
